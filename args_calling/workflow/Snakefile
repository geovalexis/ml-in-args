configfile: "config/config.yaml"
samples = [os.path.splitext(entry.name)[0] for entry in os.scandir(config["samples_dir"]) if entry.is_file()]

rule all:
    input:
        expand("results/{sample}", sample=samples)

rule download_databases:
    output:
        directory("databases")
    shell:
        """
        git clone https://bitbucket.org/genomicepidemiology/resfinder_db/ databases/resfinder_db
        git clone https://bitbucket.org/genomicepidemiology/pointfinder_db/ databases/pointfinder_db
        """

rule compute_args:
    input:
        fasta=config["samples_dir"]+"/{sample}.fna",
        databases_folder="databases/"
    output:
        directory("results/{sample}")
    conda:
        "environment.yaml"
    shell:
        """
        python -m resfinder -o {output} -s '{config[specie]}' \
        --min_cov 0.6 --threshold 0.8 --acquired --point -ifa {input.fasta} \
        -db_res {input.databases_folder}/resfinder_db -db_point {input.databases_folder}/pointfinder_db
        """

# Results will look like as follows:
# - <fasta_filename>.json: json file with detailed results, including non-resistance genes.
# - pheno_table_species.txt: table with species specific AMR phenotypes.
# - pheno_table.txt: table with all AMR phenotypes.
# - ResFinder_Hit_in_genome_seq.fsa: fasta sequence of resistance gene hits found in the input data (query).
# - ResFinder_Resistance_gene_seq.fsa: fasta sequence of resistance gene hits found in the database (reference).
# - ResFinder_results_tab.txt: tab seperated table with predicted resistance genes.
# - ResFinder_results.txt: predicted resistance genes grouped by antibiotic class and hit alignments to reference resistance genes.
# - PointFinder_results.txt: tab seperated table with predicted point mutations leading to antibiotic resistance.
# - PointFinder_table.txt: predicted point mutations grouped into genes to which they belong.
#
# More information about the results can be found here: https://cge.food.dtu.dk/services/ResFinder-4.1/output.php

# TODO: parse all genes found in <fasta_filename>.json and create a table where each genes is a column and the values are booleans (confere resistance or not)
